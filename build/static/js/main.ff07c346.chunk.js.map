{"version":3,"sources":["RecipeDetails.js","Info.js","Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeDetail","ingredients","map","ingredient","className","text","Info","dishType","mealType","calories","totalTime","caloriesFloat","Math","round","toFixed","Recipe","title","image","url","useState","show","setShow","info","setInfo","src","alt","onClick","href","target","App","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","autoComplete","placeholder","type","value","onChange","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff07c346.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst RecipeDetail = ({ingredients}) => {\r\n    return ingredients.map(ingredient => {\r\n        return(\r\n            <div className=\"ingredients-bg\">\r\n\r\n                <p className=\"ingredients-text\">{ingredient.text}</p>\r\n               \r\n            </div>\r\n        )\r\n    })\r\n}\r\n\r\nexport default RecipeDetail;","import React from 'react';\r\n\r\n\r\nconst Info = ({dishType, mealType, calories, totalTime}) => {\r\n    let caloriesFloat= Math.round(calories).toFixed(2);\r\n    return(\r\n        <div className=\"info-class\">\r\n            <p className=\"infos\">Dish type - { dishType}</p>\r\n            <p className=\"infos\">Meal type  - { mealType}</p>\r\n            <p className=\"infos\">Calories - { caloriesFloat}</p>\r\n            <p className=\"infos\">Total time - { totalTime} Min</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Info;","import React, { useState } from 'react';\r\nimport RecipeDetail from './RecipeDetails';\r\nimport Info from './Info';\r\nimport './Recipe.css';\r\n\r\n\r\nconst Recipe = ({ title, image, ingredients, dishType, mealType, calories, totalTime, url}) => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [info, setInfo] = useState(false);\r\n    const [cards, setCards] = useState(true);\r\n\r\n    return (\r\n        \r\n        \r\n        <div className=\"card\">\r\n            <div className=\"card-header\">{title}\r\n            </div>\r\n           <div className=\"card-body\">\r\n            <img className=\"rounded-circle\" src={image} alt=\"Image\"/>\r\n           \r\n            <div>\r\n            <button className=\" ingredients btn btn-success\" onClick={()=>setShow(!show)}>Ingredients</button>\r\n            {show && <RecipeDetail ingredients={ingredients} />}\r\n            <button className=\" info btn btn-primary\" onClick={()=>setInfo(!info)}>Info</button>\r\n            {info && <Info dishType={dishType}\r\n                            mealType={mealType}\r\n                            calories={calories}\r\n                            totalTime={totalTime} />}\r\n           \r\n            </div>\r\n            <div>\r\n                <a href={url} target=\"blank\">how to cook...</a>\r\n            </div>\r\n            </div>\r\n        \r\n          \r\n         </div>   \r\n        \r\n    );\r\n};\r\nexport default Recipe;\r\n","import React,{useEffect, useState}from 'react';\nimport Recipe from './Recipe';\n//import RecipDetail from './RecipeDetail';\nimport './App.scss';\n\nimport { Hint } from 'react-autocomplete-hint';\nconst App = ()=> {\n\n  const APP_ID = '34eca261';\n  const APP_KEY = 'b6e1b43d6dc1f4a11b34915a349581fa';\n\n  //const exampleReq = `https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('chicken')\n  //const [ingredients, setIngredients] = useState([]);\n  useEffect(() => {\n   getRecipes();\n  },[query]);\n  \n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value)\n    //console.log(search);\n  }\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n\n  }\n\n  \n  \n\n  return(\n    <div className=\"App\">\n    <div className=\"jumbotron jumbotron-fluid\">COOKING RECIPE </div>\n      <form onSubmit ={getSearch} autoComplete=\"off\" className=\"search-form form-inline\">\n          <input placeholder=\"Search...\" className=\"form-control  input-group lg-3\"  type=\"text\" value={search} onChange={updateSearch} />\n          \n          <button type=\"submit\" className=\" searching btn btn-primary btn-md \" > \n          <i className=\"glyphicon glyphicon-search\"></i> Search \n          </button>\n          \n      </form>\n      \n      {\n        recipes.map(recipe => (\n          <Recipe \n            key={recipe.recipe.label}\n            title={recipe.recipe.label} \n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            dishType={recipe.recipe.dishType}\n            mealType={recipe.recipe.mealType}\n            calories={recipe.recipe.calories}\n            totalTime={recipe.recipe.totalTime}\n            url={recipe.recipe.url}\n            />\n            \n        ))\n        \n      }\n   \n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport $ from 'jquery';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './custom.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}